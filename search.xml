<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1天搞定SpringBoot+Vue全栈开发-学习笔记</title>
      <link href="/2024/02/18/1%E5%A4%A9%E6%90%9E%E5%AE%9ASpringBoot-Vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/02/18/1%E5%A4%A9%E6%90%9E%E5%AE%9ASpringBoot-Vue%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="web前端开发框架Vue-前后端分离开发"><a href="#web前端开发框架Vue-前后端分离开发" class="headerlink" title="web前端开发框架Vue,前后端分离开发"></a>web前端开发框架Vue,前后端分离开发</h2><h3 id="环境准备与基础知识"><a href="#环境准备与基础知识" class="headerlink" title="环境准备与基础知识"></a>环境准备与基础知识</h3><ol><li>Web技术基础<br> BS-游览器&#x2F;服务器-修改迅速，快速部署，只需请求Web服务器<br> CS-客户端&#x2F;服务器-交互性强，不同系统开发<br> 通过什么方式访问服务器</li><li>SpringBoot快速上手<br> 开发项目（暂时没看，java还没学，这次先学前端内容）</li><li>后端数据库<br>略</li><li>Vue框架<br>Vue构建用户页面<br>Vue.js提供MVVM连接视图与数据保持一致性<ul><li>导入vue.js的script脚本文件</li><li>声明将要被vue控制的DOM区域</li><li>创建vm实例对象<br> vscode的html文件快速生成模板使用!加回车</li></ul></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go_learning_1</title>
      <link href="/2024/02/12/go-learning-1/"/>
      <url>/2024/02/12/go-learning-1/</url>
      
        <content type="html"><![CDATA[<h2 id="GO语言基本语法"><a href="#GO语言基本语法" class="headerlink" title="GO语言基本语法"></a>GO语言基本语法</h2><ol><li>go语言需要依靠导入包，但是只允许导入使用的包，如果导入后不使用会报错。package声明该.go文件属于哪一个包，import导入需要使用的包，包中包括需要使用的函数，同时go语言不需要使用;作为结尾。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go</span><br><span class="line">package main</span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line">func main()&#123;</span><br><span class="line">    fmt.Println(&quot;hello world&quot;)</span><br><span class="line">&#125;</span><br><span class="line">//fmt.Println打印函数</span><br></pre></td></tr></table></figure></li><li>var关键字初始化变量，同时对于字符串也提供+用作连接，+&#x3D;重复更新。for循环同其他语言一样，初始化，判断条件，执行操作。注意初始化应使用:&#x3D;做一个短变量声明</li><li>map创建一个键值对声明，与c++中的map相似。bufio中的Scaner处理以行为单位的输入。基本的Println输出格式，与c语言相似。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go语言学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码整洁之道读书笔记一</title>
      <link href="/2024/02/08/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01/"/>
      <url>/2024/02/08/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-整洁的代码"><a href="#第一章-整洁的代码" class="headerlink" title="第一章-整洁的代码"></a>第一章-整洁的代码</h3><p>糟糕的代码难以修改，项目越到后期代码修改难度越大，每更改一段就要更改好几处</p><ol><li>完善错误处理代码，前后一致的命名，专注一件事（每个函数类模块处理一件事）</li><li>便于维护与修改，方便进行测试，尽量小（易读和易修改；整洁的代码在测试之上，没有测试的代码是不干净的；推崇小块代码）</li><li>不要有过多的重复代码，有意义的命名，重复的部分进行封装</li><li>简单代码，依据重要顺序：</li></ol><ul><li>能通过所有的测试；</li><li>没有重复代码；</li><li>体现系统中的全部设计理念；</li><li>包含尽量少的实体，不如类、方法、函数等；</li></ul><h3 id="第二章-有意义的命名"><a href="#第二章-有意义的命名" class="headerlink" title="第二章-有意义的命名"></a>第二章-有意义的命名</h3><ol><li>好的变量命名不需要注释，名称要有意义，明确到底是什么</li><li>命名要避免误导，注意不要随便使用list，不要使用两个过于相似的代码</li><li>做有意义的区分，区分名称要让人能鉴别，如a1,a2……an，就是无意义的，a the可以区分，不要有多余的废话，namestring，name一般都是字符串</li><li>名称要可搜索，变量与常量如果多次用到要赋一个可搜索的名称</li><li>类名：类名和对象名应该是名词或名词短语。</li><li>方法名：方法应当是动词或动词短语。</li><li>每个概念对应一个词：给每个抽象概念造一个词，并且一以贯之。例如，使用fetch、retrieve 和 get 来给在多个类中的同种方法命名。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2024/02/08/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/02/08/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h2><p>这是我写的第一篇博客，主要是用于验证自己的博客搭建是否成功，然后是想记录一下搭建博客的过程，其中遇到的问题，解决的方法，和自己在搭建博客中的心得体会。</p><p>很早有自己搭建博客的想法，自己搭建一个博客可以直接记录自己的日常生活，学习心得体会。虽然这些在自己电脑上也可以自己写，但是只能自己一个人看，不方便展示；而搭建一个博客，不仅文章上传可以分享给其他人查看，自己查看起来也更有成就感。</p><p>在最开始，我想的是搭建一个自定义的博客，很多功能能自己定义，但这个难度有点大，需要前端到后端一起实现，现阶段的我还难以完成。前期我也找了一个不错的教程<a href="https://www.longair.cn/article/?id=2">Vue3+TypeScript+Django Rest Framework 搭建个人博客</a>，是通过django框架和前端搭建实现的，但是自己上起手来还是比较困难，所以我便采用了更为简单的方法搭建博客，使用hexo框架，选用主题Butterfly实现<a href="https://blog.csdn.net/qq_58608526/article/details/124652412?spm=1001.2014.3001.5506">hexo+Butterfly博客教程</a>这篇文章写的非常详细，大家跟着操作也都能实现。<br>除了这篇文章也推荐大家去查看<a href="https://hexo.io/zh-cn/">hexo官方文档</a>和<a href="https://butterfly.js.org/">Butterfly官方文档</a>。如果不想看文档，也可以观看<a href="https://www.bilibili.com/video/BV1aV411p7Bc/?spm_id_from=333.788&vd_source=b63df671d311b520be1035e151686519">B站视频教程</a>.</p><p>上述教程都很详细，这里我就不重复了，这里我讲一下我在具体操作实践中遇到的问题</p><ul><li>页面无法打开<br>  需要查看对应的yml文件末尾的deploy设置，查看branch设置是否为master,同时需要将对应的github仓库名设置为username.github.io仓库还必须为公开状态，这样才能成功映射。</li><li>中文乱码<br>  一开始网站的导航页都是英文，没有出现乱码，但当我把其中一些名称改为中文全部出现乱码，经检查发现是我使用的vscode采用的中文编码默认设置成了GBK，但网站中文一般默认采用UTF-8，只需将编码方式改回UTF-8重新保存即可解决。</li><li>更改无法实现<br>  一开始参考教程修改设置时发现好多设置不存在，自己的_config.yml内容怎么只有这么一点，后来经过仔细比对才发现每个对应的主题需要在博客根目录下单独建立一个主题对应的yml文件。</li><li>博客的标签分类内容空白<br>  给自己的文章添加tags与categories后在博客主页的对应导航无法找到自己添加的。但这不是自动添加到导航页的，需要自己在对应的index.md中添加相应标签才能实现。</li><li>设置的背景图片没有成功加载<br>  有时候自己在对应的yml文件中设置了背景图片，但是在执行hexo g和hexo s加载博客后没能展示。这是因为有些页面的图片不仅需要在yml文件修改配置，也需要在对应页面的front-mater中再次配置。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
